@if $spacing-helpers == true {
  // margin and padding values array
  $space-values : (
    0,
    // The goal of $space-names is to allow fractional units:
    // 0.5,
    1,
    2,
    3,
    4
  ) !default;

  // This doesnt work currently
  $space-names : (
    none,
    xs,
    sm,
    base,
    md,
    lg
  ) !default;

  // margin and padding shorthands
  $space-prefixes : (
    p  : padding,
    pt : padding-top,
    pr : padding-right,
    pb : padding-bottom,
    pl : padding-left,
    m  : margin,
    mt : margin-top,
    mr : margin-right,
    mb : margin-bottom,
    ml : margin-left,
  ) !default;

  $grid-spacing-breakpoints-custom: (
    xs: 0,
    // Small screen / phone
    sm: $screen-xs,
    // Medium screen / tablet
    md: $screen-sm,
    // Large screen / desktop
    lg: $screen-md,
    // Extra large screen / wide desktop
    xl: $screen-lg
  ) !default;

  $spacing-breakpoints : $grid-spacing-breakpoints-custom;

  // main function definition
  @mixin make-space($values, $prefixes, $spacing-breakpoints) {
    @each $breakpoint-name, $breakpoint-value in $spacing-breakpoints {
      // if xs value = 0, set it global without media queries
      @if($breakpoint-value == 0) {
        @each $attr-short, $attr-long in $prefixes {
          @each $value in $values {
            .#{$breakpoint-name}-#{$attr-short}-#{$value} {
              #{$attr-long}: #{$value}rem;
            }
          }
        }
      }
      // breakpoint values that not equal to 0
      @else {
        @media screen and (min-width: $breakpoint-value) {
          @each $attr-short, $attr-long in $prefixes {
            @each $value in $values {
              .#{$breakpoint-name}-#{$attr-short}-#{$value} {
                #{$attr-long}: #{$value}rem;
              }
            }
          }
        }
      }
    }
  }

  @include make-space($space-values, $space-prefixes, $spacing-breakpoints);
}



